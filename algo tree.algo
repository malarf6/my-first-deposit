FUNCTION countnodes(root : ^BT) : INTEGER
VAR
    count : INTEGER
BEGIN
  count:=0
 IF (root == NULL) THEN
     return count ; 
 ELSE
      countnodes(root->left);
      count++;
      countnodes(root->right);
 END_IF
END


FUNCTION height(node : ^BT) : INTEGER
VAR
 lDepth :INTEGER
 rDepth :INTEGER
BEGIN
    IF (node == NULL)  THEN
        return 0; 
    ELSE
          lDepth = maxDepth(node->left);  
          rDepth = maxDepth(node->right);  
        
        if (lDepth > rDepth)  
            return(lDepth + 1);  
        else return(rDepth + 1);  
    END_IF
END


FUNCTION leaves(node : ^BT) : INTEGER
VAR
    
BEGIN
    IF (node == NULL)   THEN
        return 0; 
    ELSE
       IF(node->left == NULL AND node->right == NULL)  
        return 1;          
    ELSE
        return leaves(node->left)+  
               leaves(node->right);  
    END_IF
        
  END

  FUNCTION maximum(root : ^BT) : INTEGER
BEGIN
    IF (root <> NULL) THEN
        IF (root^.LC = NULL AND root^.RC = NULL) THEN
            RETURN root^.VAL;
        ELSE_IF (root^.LC = NULL) THEN
            RETURN max(root^.VAL,maximum(root^.RC));
        ELSE_IF (root^.RC = NULL) THEN
            RETURN max(root^.VAL,maximum(root^.LC));
        ELSE
            RETURN max(maximum(root^.LC),maximum(root^.RC));
        END_IF
    END_IF
END


FUNCTION full_BT(root : ^BT) : BOOLEAN
BEGIN
    IF (root <> NULL) THEN
        IF (root^.LC = NULL AND root^.RC = NULL) THEN
            RETURN TRUE;
        ELSE_IF (root^.LC <> NULL AND root^.RC <> NULL) THEN
            RETURN full_BT(root^.LC) AND full_BT(root^.RC);
        ELSE
            RETURN FALSE;
        END_IF
    END_IF
END   